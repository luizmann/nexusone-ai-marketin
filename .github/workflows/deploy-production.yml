# 🚀 NexusOne AI - Automated Deployment Pipeline with API Validation
name: Production Deployment Pipeline

on:
  push:
    branches: [ main, production ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deployment Environment'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      validate_apis:
        description: 'Run API Validation'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20'
  DEPLOYMENT_TIMEOUT: '10m'
  MAX_RETRIES: 3

jobs:
  # ==========================================
  # PRE-DEPLOYMENT CHECKS
  # ==========================================
  validate-environment:
    name: 🔍 Environment Validation
    runs-on: ubuntu-latest
    outputs:
      deploy-target: ${{ steps.environment.outputs.target }}
      should-deploy: ${{ steps.environment.outputs.should-deploy }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Determine deployment target
      id: environment
      run: |
        if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event.inputs.deploy_environment }}" == "production" ]]; then
          echo "target=production" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        elif [[ "${{ github.ref }}" == "refs/heads/develop" ]] || [[ "${{ github.event.inputs.deploy_environment }}" == "staging" ]]; then
          echo "target=staging" >> $GITHUB_OUTPUT
          echo "should-deploy=true" >> $GITHUB_OUTPUT
        else
          echo "target=preview" >> $GITHUB_OUTPUT
          echo "should-deploy=false" >> $GITHUB_OUTPUT
        fi
        
    - name: Environment Summary
      run: |
        echo "🎯 Deployment Target: ${{ steps.environment.outputs.target }}"
        echo "🚀 Should Deploy: ${{ steps.environment.outputs.should-deploy }}"

  # ==========================================
  # DEPENDENCY VALIDATION
  # ==========================================
  validate-dependencies:
    name: 📦 Dependency Validation
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Validate package.json
      run: |
        echo "🔍 Validating package.json structure..."
        node -e "
          const pkg = require('./package.json');
          if (!pkg.name || !pkg.version || !pkg.scripts) {
            throw new Error('Invalid package.json structure');
          }
          console.log('✅ Package.json is valid');
          console.log('📦 Package:', pkg.name, 'v' + pkg.version);
        "
        
    - name: Install dependencies
      run: |
        echo "📥 Installing dependencies..."
        npm ci --only=production
        
    - name: Verify critical dependencies
      run: |
        echo "🔍 Checking critical dependencies..."
        node -e "
          const critical = ['react', 'react-dom', '@supabase/supabase-js', 'openai'];
          const pkg = require('./package.json');
          critical.forEach(dep => {
            if (!pkg.dependencies[dep]) {
              throw new Error(\`Missing critical dependency: \${dep}\`);
            }
            console.log('✅', dep, 'found');
          });
        "

  # ==========================================
  # API VALIDATION & HEALTH CHECKS
  # ==========================================
  validate-apis:
    name: 🔌 API Validation & Health Checks
    runs-on: ubuntu-latest
    needs: validate-environment
    if: ${{ github.event.inputs.validate_apis != 'false' }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create API validation script
      run: |
        cat > validate-apis.js << 'EOF'
        const https = require('https');
        const fs = require('fs');
        
        // Load environment variables from .env.production
        if (fs.existsSync('.env.production')) {
          const envContent = fs.readFileSync('.env.production', 'utf8');
          envContent.split('\n').forEach(line => {
            const [key, value] = line.split('=');
            if (key && value && !key.startsWith('#')) {
              process.env[key] = value;
            }
          });
        }
        
        const apiChecks = [
          {
            name: 'Supabase',
            url: process.env.VITE_SUPABASE_URL,
            required: true,
            timeout: 5000
          },
          {
            name: 'OpenAI',
            url: 'https://api.openai.com/v1/models',
            headers: { 'Authorization': `Bearer ${process.env.OPENAI_API_KEY}` },
            required: true,
            timeout: 10000
          },
          {
            name: 'ElevenLabs',
            url: 'https://api.elevenlabs.io/v1/voices',
            headers: { 'xi-api-key': process.env.ELEVENLABS_API_KEY },
            required: false,
            timeout: 8000
          },
          {
            name: 'Replicate',
            url: 'https://api.replicate.com/v1/models',
            headers: { 'Authorization': `Token ${process.env.REPLICATE_API_TOKEN}` },
            required: false,
            timeout: 8000
          },
          {
            name: 'Gupshup WhatsApp',
            url: 'https://api.gupshup.io/sm/api/v1/app',
            headers: { 'apikey': process.env.GUPSHUP_API_KEY },
            required: false,
            timeout: 8000
          },
          {
            name: 'CJ Dropshipping',
            url: 'https://developers.cjdropshipping.com/api2.0/v1/ping',
            headers: { 'CJ-Access-Token': process.env.CJ_API_KEY },
            required: false,
            timeout: 10000
          }
        ];
        
        async function checkAPI(api) {
          return new Promise((resolve) => {
            if (!api.url) {
              resolve({ ...api, status: 'MISSING_URL', error: 'URL not configured' });
              return;
            }
            
            const url = new URL(api.url);
            const options = {
              hostname: url.hostname,
              port: url.port || 443,
              path: url.pathname + url.search,
              method: 'GET',
              headers: api.headers || {},
              timeout: api.timeout || 5000
            };
            
            const req = https.request(options, (res) => {
              if (res.statusCode >= 200 && res.statusCode < 400) {
                resolve({ ...api, status: 'HEALTHY', statusCode: res.statusCode });
              } else {
                resolve({ ...api, status: 'UNHEALTHY', statusCode: res.statusCode, error: `HTTP ${res.statusCode}` });
              }
            });
            
            req.on('error', (error) => {
              resolve({ ...api, status: 'ERROR', error: error.message });
            });
            
            req.on('timeout', () => {
              req.destroy();
              resolve({ ...api, status: 'TIMEOUT', error: 'Request timeout' });
            });
            
            req.end();
          });
        }
        
        async function validateAPIs() {
          console.log('🔍 Starting API validation...\n');
          
          const results = await Promise.all(apiChecks.map(checkAPI));
          
          let hasErrors = false;
          let hasCriticalErrors = false;
          
          results.forEach(result => {
            const status = result.status;
            const icon = status === 'HEALTHY' ? '✅' : 
                        status === 'MISSING_URL' ? '⚠️' : 
                        result.required ? '❌' : '⚠️';
            
            console.log(`${icon} ${result.name}: ${status}`);
            if (result.error) {
              console.log(`   Error: ${result.error}`);
            }
            if (result.statusCode) {
              console.log(`   Status Code: ${result.statusCode}`);
            }
            
            if (status !== 'HEALTHY') {
              hasErrors = true;
              if (result.required) {
                hasCriticalErrors = true;
              }
            }
          });
          
          console.log('\n📊 Validation Summary:');
          console.log(`   Healthy APIs: ${results.filter(r => r.status === 'HEALTHY').length}`);
          console.log(`   Total APIs: ${results.length}`);
          console.log(`   Critical Errors: ${hasCriticalErrors ? 'YES' : 'NO'}`);
          
          if (hasCriticalErrors) {
            console.log('\n❌ Critical API validation failed!');
            process.exit(1);
          } else if (hasErrors) {
            console.log('\n⚠️ Some non-critical APIs are unavailable');
            process.exit(0);
          } else {
            console.log('\n✅ All APIs are healthy!');
            process.exit(0);
          }
        }
        
        validateAPIs().catch(error => {
          console.error('💥 API validation failed:', error);
          process.exit(1);
        });
        EOF
        
    - name: Run API validation
      run: |
        echo "🔌 Validating API endpoints..."
        node validate-apis.js
        
    - name: Generate API health report
      run: |
        echo "📊 Generating API health report..."
        cat > api-health-report.md << 'EOF'
        # 🔌 API Health Report
        
        Generated on: $(date)
        Environment: ${{ needs.validate-environment.outputs.deploy-target }}
        
        ## Summary
        This report shows the health status of all integrated APIs.
        
        ## Critical APIs (Required for core functionality)
        - ✅ Supabase Database & Auth
        - ✅ OpenAI GPT-4 (NexBrain)
        
        ## Marketing APIs
        - 🔌 Facebook Marketing API
        - 🔌 Gupshup WhatsApp Business
        
        ## Content Generation APIs
        - 🔌 ElevenLabs Text-to-Speech
        - 🔌 Replicate Image Generation
        - 🔌 Luma AI Video Generation
        
        ## E-commerce APIs
        - 🔌 CJ Dropshipping
        - 🔌 Unsplash Images
        
        ## Status Legend
        - ✅ Healthy and operational
        - ⚠️ Warning or non-critical issue
        - ❌ Error requiring attention
        - 🔌 Configured but not validated
        
        EOF
        
    - name: Upload API health report
      uses: actions/upload-artifact@v4
      with:
        name: api-health-report
        path: api-health-report.md

  # ==========================================
  # BUILD & TEST
  # ==========================================
  build-and-test:
    name: 🔨 Build & Test
    runs-on: ubuntu-latest
    needs: [validate-environment, validate-dependencies]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        echo "📥 Installing all dependencies..."
        npm ci
        
    - name: Run TypeScript check
      run: |
        echo "🔍 Running TypeScript validation..."
        npx tsc --noEmit
        
    - name: Run linting
      run: |
        echo "🧹 Running ESLint..."
        npm run lint
        
    - name: Build application
      run: |
        echo "🔨 Building application..."
        npm run build:prod
        
    - name: Verify build output
      run: |
        echo "🔍 Verifying build output..."
        if [ ! -d "dist" ]; then
          echo "❌ Build failed - dist directory not found"
          exit 1
        fi
        
        if [ ! -f "dist/index.html" ]; then
          echo "❌ Build failed - index.html not found"
          exit 1
        fi
        
        echo "✅ Build output verified"
        echo "📦 Build size: $(du -sh dist | cut -f1)"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  # ==========================================
  # SECURITY SCAN
  # ==========================================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: validate-environment
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: |
        echo "🔒 Running npm security audit..."
        npm audit --audit-level moderate
        
    - name: Check for secrets in code
      run: |
        echo "🔍 Scanning for exposed secrets..."
        # Check for common secret patterns
        if grep -r "sk-" src/ --exclude-dir=node_modules || \
           grep -r "eyJ" src/ --exclude-dir=node_modules || \
           grep -r "pk_live" src/ --exclude-dir=node_modules; then
          echo "❌ Potential secrets found in source code!"
          exit 1
        fi
        echo "✅ No secrets detected in source code"
        
    - name: Validate environment configuration
      run: |
        echo "🔍 Validating environment configuration..."
        node -e "
          const fs = require('fs');
          if (fs.existsSync('.env.production')) {
            const content = fs.readFileSync('.env.production', 'utf8');
            const lines = content.split('\n');
            const secrets = lines.filter(line => 
              line.includes('your_') || 
              line.includes('placeholder') ||
              line.includes('change_me')
            );
            if (secrets.length > 0) {
              console.log('⚠️ Found placeholder values in .env.production:');
              secrets.forEach(s => console.log('  ', s));
            } else {
              console.log('✅ Environment configuration validated');
            }
          }
        "

  # ==========================================
  # DEPLOYMENT
  # ==========================================
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [validate-environment, build-and-test, security-scan]
    if: needs.validate-environment.outputs.deploy-target == 'staging'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Deploy to Netlify Staging
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - Staging"
        enable-pull-request-comment: true
        enable-commit-comment: false
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_STAGING_SITE_ID }}

  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: [validate-environment, build-and-test, security-scan, validate-apis]
    if: needs.validate-environment.outputs.deploy-target == 'production'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        
    - name: Deploy to Netlify Production
      uses: nwtgck/actions-netlify@v3.0
      with:
        publish-dir: './dist'
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production Deploy from GitHub Actions"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_PRODUCTION_SITE_ID }}
        
    - name: Deploy Supabase Edge Functions
      run: |
        echo "🔌 Deploying Supabase Edge Functions..."
        # Install Supabase CLI
        npm install -g supabase
        
        # Deploy edge functions
        if [ -d "supabase/functions" ]; then
          echo "📦 Found edge functions, deploying..."
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROJECT_REF }}
        else
          echo "⚠️ No edge functions found to deploy"
        fi
      env:
        SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

  # ==========================================
  # POST-DEPLOYMENT VALIDATION
  # ==========================================
  post-deployment-validation:
    name: ✅ Post-Deployment Validation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: needs.validate-environment.outputs.deploy-target == 'production'
    
    steps:
    - name: Wait for deployment
      run: |
        echo "⏳ Waiting for deployment to stabilize..."
        sleep 30
        
    - name: Health check
      run: |
        echo "🔍 Running health checks..."
        DEPLOYMENT_URL="${{ secrets.PRODUCTION_URL || 'https://nexusone-ai.netlify.app' }}"
        
        # Check if site is accessible
        if curl -f -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" | grep -q "200"; then
          echo "✅ Site is accessible"
        else
          echo "❌ Site health check failed"
          exit 1
        fi
        
        # Check if JavaScript loads
        if curl -s "$DEPLOYMENT_URL" | grep -q "script"; then
          echo "✅ JavaScript assets found"
        else
          echo "⚠️ No JavaScript assets detected"
        fi
        
    - name: Performance check
      run: |
        echo "⚡ Running basic performance check..."
        DEPLOYMENT_URL="${{ secrets.PRODUCTION_URL || 'https://nexusone-ai.netlify.app' }}"
        
        # Measure response time
        RESPONSE_TIME=$(curl -o /dev/null -s -w "%{time_total}" "$DEPLOYMENT_URL")
        echo "📊 Response time: ${RESPONSE_TIME}s"
        
        # Check if response time is acceptable (< 3 seconds)
        if (( $(echo "$RESPONSE_TIME < 3.0" | bc -l) )); then
          echo "✅ Performance check passed"
        else
          echo "⚠️ Slow response time detected"
        fi

  # ==========================================
  # NOTIFICATION
  # ==========================================
  notify-deployment:
    name: 📢 Deployment Notification
    runs-on: ubuntu-latest
    needs: [deploy-production, post-deployment-validation]
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        echo "📋 Creating deployment summary..."
        DEPLOYMENT_STATUS="${{ needs.post-deployment-validation.result }}"
        DEPLOYMENT_URL="${{ secrets.PRODUCTION_URL || 'https://nexusone-ai.netlify.app' }}"
        
        cat > deployment-summary.md << EOF
        # 🚀 NexusOne AI Deployment Summary
        
        **Environment:** Production  
        **Deployment Date:** $(date)  
        **Deployment Status:** $DEPLOYMENT_STATUS  
        **Deployment URL:** $DEPLOYMENT_URL  
        
        ## Components Deployed
        - ✅ Frontend Application
        - ✅ Supabase Edge Functions
        - ✅ Environment Configuration
        
        ## Validation Results
        - Health Check: ${{ needs.post-deployment-validation.result }}
        - API Validation: ${{ needs.validate-apis.result }}
        - Security Scan: ${{ needs.security-scan.result }}
        
        ## Next Steps
        1. Monitor application performance
        2. Check user analytics
        3. Verify all integrations
        4. Update documentation
        
        EOF
        
        cat deployment-summary.md
        
    - name: Upload deployment summary
      uses: actions/upload-artifact@v4
      with:
        name: deployment-summary
        path: deployment-summary.md

# ==========================================
# WORKFLOW TRIGGERS AND PERMISSIONS
# ==========================================
permissions:
  contents: read
  deployments: write
  pull-requests: write
  checks: write